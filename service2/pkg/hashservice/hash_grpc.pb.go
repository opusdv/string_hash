// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hashservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringHashClient is the client API for StringHash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringHashClient interface {
	GetHash(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Hash, error)
	CreateHash(ctx context.Context, in *Strings, opts ...grpc.CallOption) (*Hashs, error)
}

type stringHashClient struct {
	cc grpc.ClientConnInterface
}

func NewStringHashClient(cc grpc.ClientConnInterface) StringHashClient {
	return &stringHashClient{cc}
}

func (c *stringHashClient) GetHash(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/hash.StringHash/GetHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringHashClient) CreateHash(ctx context.Context, in *Strings, opts ...grpc.CallOption) (*Hashs, error) {
	out := new(Hashs)
	err := c.cc.Invoke(ctx, "/hash.StringHash/CreateHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringHashServer is the server API for StringHash service.
// All implementations must embed UnimplementedStringHashServer
// for forward compatibility
type StringHashServer interface {
	GetHash(context.Context, *Ids) (*Hash, error)
	CreateHash(context.Context, *Strings) (*Hashs, error)
	mustEmbedUnimplementedStringHashServer()
}

// UnimplementedStringHashServer must be embedded to have forward compatible implementations.
type UnimplementedStringHashServer struct {
}

func (UnimplementedStringHashServer) GetHash(context.Context, *Ids) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHash not implemented")
}
func (UnimplementedStringHashServer) CreateHash(context.Context, *Strings) (*Hashs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHash not implemented")
}
func (UnimplementedStringHashServer) mustEmbedUnimplementedStringHashServer() {}

// UnsafeStringHashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringHashServer will
// result in compilation errors.
type UnsafeStringHashServer interface {
	mustEmbedUnimplementedStringHashServer()
}

func RegisterStringHashServer(s grpc.ServiceRegistrar, srv StringHashServer) {
	s.RegisterService(&StringHash_ServiceDesc, srv)
}

func _StringHash_GetHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringHashServer).GetHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hash.StringHash/GetHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringHashServer).GetHash(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringHash_CreateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Strings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringHashServer).CreateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hash.StringHash/CreateHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringHashServer).CreateHash(ctx, req.(*Strings))
	}
	return interceptor(ctx, in, info, handler)
}

// StringHash_ServiceDesc is the grpc.ServiceDesc for StringHash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringHash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hash.StringHash",
	HandlerType: (*StringHashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHash",
			Handler:    _StringHash_GetHash_Handler,
		},
		{
			MethodName: "CreateHash",
			Handler:    _StringHash_CreateHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hash.proto",
}
